<?php

namespace App\Models;

use App\Notifications\ResetPassword;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Auth;

class User extends Authenticatable
{
    // notifiable 是一个trait
    use Notifiable;

    // 闭包函数中 use 的作用是连接闭包与外界变量

    // 指定表名
    protected $table = 'users'; // 如果表名与模型名相对应,则无需指定,系统会默认给出这个表名

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    // 在 User 用户实例生成之前, 生成一个 activation_token
    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($user) {
            $user->activation_token = str_random(30);
        });
    }

    public function gravatar($size = 100)
    {
        $hash = md5(strtolower(trim($this->attributes['email'])));
        $url  = 'http://www.gravatar.com/avatar/' . $hash . '?s=' . $size . '&d=404';

        // curl 查看 gravatar图片是否存在
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, true); // 返回header头信息
        curl_setopt($ch, CURLOPT_NOBODY, true); // 不返回body信息
        $output = curl_exec($ch);
        curl_close($ch);

        $output = str_replace(' ', '', strtolower($output));

        $email_bgc_arr = [];

        if (strpos(strtolower($output), '404notfound') !== false) {
            // 图片不存在, 进行处理, 存在则直接跳过此步骤
            $url       = '';
            $email_arr = [($this->attributes['email'])[0], ($this->attributes['email'])[1], ($this->attributes['email'])[2]];

            // 按邮箱前三个字符按比例算出rgb值(数字加字母共36个字符)
            $email_bgc_arr = array_map(function ($v) {
                if (is_numeric($v)) {
                    $v = $v + 1;
                } else {
                    $v = ord(strtolower($v)) - 96 + 10;
                }
                $v = floor($v / 36 * 255);
                return $v;
            }, $email_arr);
        }
//        $user = $this;
        return compact('url', 'email_bgc_arr');
    }

    public function sendPasswordResetNotification($token)
    {
        $this->notify(new ResetPassword($token));
    }

    // 关联关系 -- 关联状态表,一个用户对应多个状态,一对多
    public function statuses()
    {
        return $this->hasMany(Status::class, 'user_id');
    }

    // 关联关系 -- 获取当前用户的粉丝
    public function fans()
    {
        return $this->belongsToMany(User::class, 'followers', 'stars_id', 'fans_id');
    }

    // 关联关系 -- 获取当前用户关注的人(明星)
    public function stars()
    {
        return $this->belongsToMany(User::class, 'followers', 'fans_id', 'stars_id');

    }

    // 执行关注动作
    public function follow($stars_ids)
    {
        if (!is_array($stars_ids)) {
            // $user_ids = compact('user_ids');
            $stars_ids = [$stars_ids];
        }
        $this->stars()->sync($stars_ids, false);
    }

    // 执行取消关注动作
    public function unfollow($stars_ids)
    {
        if (!is_array($stars_ids)) {
            // $stars_ids = compact('stars_ids');
            $stars_ids = [$stars_ids];
        }
        $this->stars()->detach($stars_ids);
    }

    // 查询 当前用户A 是否关注了 明星B
    public function isFollowing($stars_id)
    {
        return $this->stars->contains($stars_id);
    }

    // 获取当前用户的全部状态
    public function feed0()
    {
        return $this->statuses()->orderBy('created_at', 'desc');
    }

    // 获取当前用户及其所关注的用户的全部状态
    public function feed()
    {
        // $user->followings == $user->followings()->get()
        $user_ids = Auth::user()->stars->pluck('id')->toArray();
        array_push($user_ids, Auth::user()->id);

        return Status::whereIn('user_id', $user_ids)
            ->with('user')
            ->orderBy('created_at', 'desc');
    }
}
